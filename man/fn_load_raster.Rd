% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_functions.R
\name{fn_load_raster}
\alias{fn_load_raster}
\title{Create a raster table record for point counts derived from a LAS tile}
\usage{
fn_load_raster(
  db,
  raster_url,
  strata_def = "cermb",
  raster_crs = NULL,
  metadata_id = NULL,
  protocol = "vsicurl",
  tilew = 256,
  R2P = "C:/Program Files/PostgreSQL/12/bin/raster2pgsql.exe",
  host = NULL,
  dbname = NULL,
  username = NULL,
  password = NULL
)
}
\arguments{
\item{db}{An open database connection for a user with administrator rights
to the database.}

\item{raster_url}{A URL giving the file location, e.g. in an accessible S3
bucket.}

\item{strata_def}{A standard strata definition abbreviation, supported by the
database. Default to \code{'cermb'} which corresponds to
\code{CERMBlidar::StrataCERMB}.}

\item{raster_crs}{The coordinate reference system of the raster file in a
form that can be understood by the \code{sf::st_crs()} function (e.g. a WKT
string or an integer EPSG code. This is used to infer the name of the
relevant meta-data and raster tables in the database. If \code{NULL}
(default), the function will attempt to retrieve the CRS from the raster
file.}

\item{metadata_id}{Integer ID for the associated record in the meta-data table
associated with the destination raster table. If \code{NULL} (default),
the function will search for a meta-data record based on the file name of
the input raster.}

\item{protocol}{The name of a GDAL-supported virtual file system protocol
to use when accessing the raster file from storage. The default is
\code{'vsicurl'}. See
\href{https://gdal.org/user/virtual_file_systems.html}{GDAL online documentation}
for other options. This will be stored as part of the raster file path in
the database raster table record.}

\item{tilew}{The tile size to use for the raster.
See this \href{https://blog.crunchydata.com/blog/postgis-raster-and-crunchy-bridge}{
Postgis raster example} for more details.}

\item{R2P}{The path to the Postgis command line program \code{raster2pgsql}.
If \code{NULL} or not found, the function will attempt to locate the
program on the client system.}

\item{host}{Host/server on which the database resides. If \code{NULL}
(default), will be determined from the database connection object.}

\item{dbname}{Database name. If \code{NULL} (default), will be determined
from the database connection object.}

\item{password}{User password. If \code{NULL}, this will automatically fall
back to the user's \code{pgpass.conf} file, if one exists, or the
\code{PGPASSWORD} environment variable. On a Windows client, the \code{pgpass.conf} file
in the directlry \code{~/AppData/Roaming/postgresql}.}

\item{user}{User name. If \code{NULL} (default), will be determined from the
database connection object.}
}
\description{
This function associates a multi-band raster of point counts, derived from a
LAS point cloud using the \code{CERMBlidar::get_stratum_counts} function,
with an existing meta-data record for the LAS tile. Usually, it will be
called from the \code{ldb_import_tile()} function, but can also be called
directly if the integer ID value of the associated meta-data table record is
known. The database uses \emph{out-db} storage for raster files, where a
raster table record stores the path to the file location, which will usually
be AWS S3-compatible storage although other types of storage can be used.
}
\details{
If any credentials are required to access the file (e.g. AWS Access Key) it
is assumed that this have been set in the environment from which the function
is being called.
}
